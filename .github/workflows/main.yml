name: CI/CD Pipeline for Odoo ENCG

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Log in to Docker Hub (or another registry)
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Set up QEMU for multi-architecture builds (optional but useful)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Step 4: Set up Docker Buildx (for efficient builds and multi-platform support)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 5: Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/odoo-hotel-resevstion:latest

  deploy:
    name: Deploy the Application
    runs-on: ubuntu-latest
    needs: build  # Ensure this job runs only after the build job is successful

    steps:
      # Step 1: Deploy to the server via SSH and run Docker Compose
      - name: Deploy to server
        uses: cross-the-world/ssh-scp-ssh-pipelines@v1.1.4
        with:
          host: ${{ secrets.SERVER_IP }}                # IP of your server
          port: 22                                      # Default SSH port
          user: ${{ secrets.SERVER_USER }}              # SSH user
          key: ${{ secrets.PRIVATE_KEY }}               # Private SSH key stored in secrets
          first_ssh: |
            echo "Updating System"
            sudo apt-get update
            sudo apt-get install -y docker-compose  # Ensure docker-compose is installed
          last_ssh: |
            echo "Logging in to Docker"
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            echo "Stopping and removing existing containers"
            docker-compose down
            echo "Pulling latest images"
            docker-compose pull
            echo "Starting containers"
            docker-compose up -d
